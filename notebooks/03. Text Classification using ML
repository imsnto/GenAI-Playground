{"metadata":{"kernelspec":{"language":"python","display_name":"Python 3","name":"python3"},"language_info":{"name":"python","version":"3.10.12","mimetype":"text/x-python","codemirror_mode":{"name":"ipython","version":3},"pygments_lexer":"ipython3","nbconvert_exporter":"python","file_extension":".py"},"kaggle":{"accelerator":"none","dataSources":[{"sourceId":10975363,"sourceType":"datasetVersion","datasetId":6829490}],"dockerImageVersionId":30919,"isInternetEnabled":true,"language":"python","sourceType":"notebook","isGpuEnabled":false}},"nbformat_minor":4,"nbformat":4,"cells":[{"cell_type":"code","source":"import numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nfrom tqdm import tqdm","metadata":{"_uuid":"8f2839f25d086af736a60e9eeb907d3b93b6e0e5","_cell_guid":"b1076dfc-b9ad-4769-8c92-a6c4dae69d19","trusted":true,"execution":{"iopub.status.busy":"2025-03-12T03:45:16.673399Z","iopub.execute_input":"2025-03-12T03:45:16.673797Z","iopub.status.idle":"2025-03-12T03:45:16.678646Z","shell.execute_reply.started":"2025-03-12T03:45:16.673768Z","shell.execute_reply":"2025-03-12T03:45:16.677415Z"}},"outputs":[],"execution_count":2},{"cell_type":"code","source":"# !pip install spacy\n# !python -m spacy download en_core_web_sm","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-03-10T04:26:26.331328Z","iopub.execute_input":"2025-03-10T04:26:26.331789Z","iopub.status.idle":"2025-03-10T04:26:26.337164Z","shell.execute_reply.started":"2025-03-10T04:26:26.331762Z","shell.execute_reply":"2025-03-10T04:26:26.335868Z"}},"outputs":[],"execution_count":2},{"cell_type":"code","source":"import re\nimport spacy\nfrom sklearn.feature_extraction.text import TfidfVectorizer\n\n\n# Load spaCy's English model\nnlp = spacy.load('en_core_web_sm')","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-03-10T04:26:26.338268Z","iopub.execute_input":"2025-03-10T04:26:26.338991Z","iopub.status.idle":"2025-03-10T04:26:34.103961Z","shell.execute_reply.started":"2025-03-10T04:26:26.338951Z","shell.execute_reply":"2025-03-10T04:26:34.102935Z"}},"outputs":[],"execution_count":3},{"cell_type":"markdown","source":"## Load the dataset","metadata":{}},{"cell_type":"code","source":"dataset_path = r'/kaggle/input/imdb-dataset/IMDB Dataset.csv'\ndf = pd.read_csv(dataset_path)\n\nprint(f\"Shape: {df.shape}\")\ndf.head()","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-03-10T05:08:50.640505Z","iopub.execute_input":"2025-03-10T05:08:50.640943Z","iopub.status.idle":"2025-03-10T05:08:51.739510Z","shell.execute_reply.started":"2025-03-10T05:08:50.640913Z","shell.execute_reply":"2025-03-10T05:08:51.738411Z"}},"outputs":[{"name":"stdout","text":"Shape: (50000, 2)\n","output_type":"stream"},{"execution_count":34,"output_type":"execute_result","data":{"text/plain":"                                              review sentiment\n0  One of the other reviewers has mentioned that ...  positive\n1  A wonderful little production. <br /><br />The...  positive\n2  I thought this was a wonderful way to spend ti...  positive\n3  Basically there's a family where a little boy ...  negative\n4  Petter Mattei's \"Love in the Time of Money\" is...  positive","text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>review</th>\n      <th>sentiment</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>One of the other reviewers has mentioned that ...</td>\n      <td>positive</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>A wonderful little production. &lt;br /&gt;&lt;br /&gt;The...</td>\n      <td>positive</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>I thought this was a wonderful way to spend ti...</td>\n      <td>positive</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>Basically there's a family where a little boy ...</td>\n      <td>negative</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>Petter Mattei's \"Love in the Time of Money\" is...</td>\n      <td>positive</td>\n    </tr>\n  </tbody>\n</table>\n</div>"},"metadata":{}}],"execution_count":34},{"cell_type":"code","source":"df = df.iloc[:df.shape[0]//2][:]","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-03-10T05:08:53.158619Z","iopub.execute_input":"2025-03-10T05:08:53.159020Z","iopub.status.idle":"2025-03-10T05:08:53.164527Z","shell.execute_reply.started":"2025-03-10T05:08:53.158992Z","shell.execute_reply":"2025-03-10T05:08:53.163192Z"}},"outputs":[],"execution_count":35},{"cell_type":"code","source":"df.shape","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-03-10T04:27:08.624167Z","iopub.execute_input":"2025-03-10T04:27:08.624583Z","iopub.status.idle":"2025-03-10T04:27:08.631587Z","shell.execute_reply.started":"2025-03-10T04:27:08.624549Z","shell.execute_reply":"2025-03-10T04:27:08.630421Z"}},"outputs":[{"execution_count":6,"output_type":"execute_result","data":{"text/plain":"(25000, 2)"},"metadata":{}}],"execution_count":6},{"cell_type":"markdown","source":"## Data Preprocessing","metadata":{}},{"cell_type":"markdown","source":"### Lowercase","metadata":{}},{"cell_type":"code","source":"df['review'] = df['review'].str.lower()","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-03-10T04:27:11.805576Z","iopub.execute_input":"2025-03-10T04:27:11.805945Z","iopub.status.idle":"2025-03-10T04:27:11.878494Z","shell.execute_reply.started":"2025-03-10T04:27:11.805919Z","shell.execute_reply":"2025-03-10T04:27:11.877496Z"}},"outputs":[],"execution_count":7},{"cell_type":"markdown","source":"### 1. Text Cleaning: Remove noise (HTML tags)","metadata":{}},{"cell_type":"code","source":"def clean_text(text):\n    text = re.sub(r'<.*?>', '', text) # remove html tag\n    return text\n\ndf['review'] = df['review'].apply(clean_text)","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-03-10T04:27:12.140502Z","iopub.execute_input":"2025-03-10T04:27:12.140881Z","iopub.status.idle":"2025-03-10T04:27:12.281053Z","shell.execute_reply.started":"2025-03-10T04:27:12.140854Z","shell.execute_reply":"2025-03-10T04:27:12.279676Z"}},"outputs":[],"execution_count":8},{"cell_type":"markdown","source":"### 2. Tokenization, Stopwords, Punctuation Removal, Lemmatization","metadata":{}},{"cell_type":"code","source":"%%time\ndef preprocess_with_spacy(text):\n    # Disable specific components in the pipeline\n    with nlp.disable_pipes('ner', 'parser', 'tagger'):  # Disable NER, parser, and POS tagging\n        doc = nlp(text)\n        return \" \".join([token.lemma_ for token in doc if not token.is_stop \\\n                         and not token.is_punct])\n\ndf['review'] = df['review'].apply(preprocess_with_spacy)","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-03-10T04:27:12.489799Z","iopub.execute_input":"2025-03-10T04:27:12.490162Z","iopub.status.idle":"2025-03-10T04:35:33.367556Z","shell.execute_reply.started":"2025-03-10T04:27:12.490136Z","shell.execute_reply":"2025-03-10T04:35:33.366412Z"}},"outputs":[{"name":"stderr","text":"/usr/local/lib/python3.10/dist-packages/spacy/pipeline/lemmatizer.py:211: UserWarning: [W108] The rule-based lemmatizer did not find POS annotation for one or more tokens. Check that your pipeline includes components that assign token.pos, typically 'tagger'+'attribute_ruler' or 'morphologizer'.\n  warnings.warn(Warnings.W108)\n","output_type":"stream"},{"name":"stdout","text":"CPU times: user 8min 18s, sys: 1.61 s, total: 8min 20s\nWall time: 8min 20s\n","output_type":"stream"}],"execution_count":9},{"cell_type":"code","source":"","metadata":{"trusted":true},"outputs":[],"execution_count":null},{"cell_type":"code","source":"","metadata":{"trusted":true},"outputs":[],"execution_count":null},{"cell_type":"markdown","source":"## Feature Extraction","metadata":{}},{"cell_type":"markdown","source":"#### Split the dataset","metadata":{}},{"cell_type":"code","source":"from sklearn.model_selection import StratifiedShuffleSplit\n\nX = df['review']\ny = df['sentiment']\n\n# Create StratifiedShuffleSplit instance\nsss = StratifiedShuffleSplit(n_splits=1, test_size=0.2, random_state=42)\n\n# Generate train/test indices\nfor train_index, test_index in sss.split(X, y):\n    X_train, X_test = X[train_index], X[test_index]\n    y_train, y_test = y[train_index], y[test_index]\n\nprint(X_train.shape)","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-03-10T04:35:33.369063Z","iopub.execute_input":"2025-03-10T04:35:33.369426Z","iopub.status.idle":"2025-03-10T04:35:33.590151Z","shell.execute_reply.started":"2025-03-10T04:35:33.369386Z","shell.execute_reply":"2025-03-10T04:35:33.588983Z"}},"outputs":[{"name":"stdout","text":"(20000,)\n","output_type":"stream"}],"execution_count":10},{"cell_type":"markdown","source":"##### Encoding categorical labels into numerical format","metadata":{}},{"cell_type":"code","source":"from sklearn.preprocessing import LabelEncoder\n\nlabel_encoder = LabelEncoder()\ny_train = label_encoder.fit_transform(y_train)","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-03-10T04:35:33.592226Z","iopub.execute_input":"2025-03-10T04:35:33.592580Z","iopub.status.idle":"2025-03-10T04:35:33.602183Z","shell.execute_reply.started":"2025-03-10T04:35:33.592553Z","shell.execute_reply":"2025-03-10T04:35:33.600748Z"}},"outputs":[],"execution_count":11},{"cell_type":"code","source":"","metadata":{"trusted":true},"outputs":[],"execution_count":null},{"cell_type":"markdown","source":"#### Bag of Words","metadata":{}},{"cell_type":"code","source":"from sklearn.feature_extraction.text import CountVectorizer\n\n# Initialize CountVectorizer (BoW)\ncv = CountVectorizer()\n\n# Fit the model and transform the data\nX_bow = cv.fit_transform(X_train)\n\n# Convert the result to an array\nX_bow_array = X_bow.toarray()","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-03-10T04:43:41.784500Z","iopub.execute_input":"2025-03-10T04:43:41.785069Z","iopub.status.idle":"2025-03-10T04:43:48.653777Z","shell.execute_reply.started":"2025-03-10T04:43:41.785029Z","shell.execute_reply":"2025-03-10T04:43:48.652667Z"}},"outputs":[],"execution_count":17},{"cell_type":"markdown","source":"#### TF-IDF","metadata":{}},{"cell_type":"code","source":"# Initialize TfidfVectorizer\ntfidf = TfidfVectorizer()\n\n# Fit and transform the data\nX_tfidf = tfidf.fit_transform(X_train)\n\n# Convert the result to an array (dense matrix) or keep it sparse\nX_tfidf_array = X_tfidf.toarray()  # Converts sparse matrix to dense array\n","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-03-10T04:46:49.292732Z","iopub.execute_input":"2025-03-10T04:46:49.293087Z","iopub.status.idle":"2025-03-10T04:46:59.025591Z","shell.execute_reply.started":"2025-03-10T04:46:49.293062Z","shell.execute_reply":"2025-03-10T04:46:59.024522Z"}},"outputs":[],"execution_count":21},{"cell_type":"markdown","source":"#### word2Vec","metadata":{}},{"cell_type":"code","source":"from gensim.models import Word2Vec\n\nmodel = Word2Vec(X_train, vector_size=100, window=5, min_count=1, sg=1)\n","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-03-10T04:56:34.571315Z","iopub.execute_input":"2025-03-10T04:56:34.572350Z","iopub.status.idle":"2025-03-10T04:57:56.612733Z","shell.execute_reply.started":"2025-03-10T04:56:34.572292Z","shell.execute_reply":"2025-03-10T04:57:56.611691Z"}},"outputs":[],"execution_count":26},{"cell_type":"markdown","source":"## Model Training","metadata":{}},{"cell_type":"markdown","source":"#### use bag of words","metadata":{}},{"cell_type":"code","source":"from sklearn.linear_model import LogisticRegression\nfrom sklearn.metrics import accuracy_score, confusion_matrix\n\n# Initialize the model (Logistic Regression for binary classification)\nmodel = LogisticRegression()\n\n# Train the model on the BoW features\nmodel.fit(X_bow_array, y_train)\n","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-03-10T04:35:39.770809Z","iopub.execute_input":"2025-03-10T04:35:39.771194Z","iopub.status.idle":"2025-03-10T04:37:27.307552Z","shell.execute_reply.started":"2025-03-10T04:35:39.771157Z","shell.execute_reply":"2025-03-10T04:37:27.306052Z"}},"outputs":[{"name":"stderr","text":"/usr/local/lib/python3.10/dist-packages/sklearn/linear_model/_logistic.py:458: ConvergenceWarning: lbfgs failed to converge (status=1):\nSTOP: TOTAL NO. of ITERATIONS REACHED LIMIT.\n\nIncrease the number of iterations (max_iter) or scale the data as shown in:\n    https://scikit-learn.org/stable/modules/preprocessing.html\nPlease also refer to the documentation for alternative solver options:\n    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression\n  n_iter_i = _check_optimize_result(\n","output_type":"stream"},{"execution_count":13,"output_type":"execute_result","data":{"text/plain":"LogisticRegression()","text/html":"<style>#sk-container-id-1 {color: black;background-color: white;}#sk-container-id-1 pre{padding: 0;}#sk-container-id-1 div.sk-toggleable {background-color: white;}#sk-container-id-1 label.sk-toggleable__label {cursor: pointer;display: block;width: 100%;margin-bottom: 0;padding: 0.3em;box-sizing: border-box;text-align: center;}#sk-container-id-1 label.sk-toggleable__label-arrow:before {content: \"▸\";float: left;margin-right: 0.25em;color: #696969;}#sk-container-id-1 label.sk-toggleable__label-arrow:hover:before {color: black;}#sk-container-id-1 div.sk-estimator:hover label.sk-toggleable__label-arrow:before {color: black;}#sk-container-id-1 div.sk-toggleable__content {max-height: 0;max-width: 0;overflow: hidden;text-align: left;background-color: #f0f8ff;}#sk-container-id-1 div.sk-toggleable__content pre {margin: 0.2em;color: black;border-radius: 0.25em;background-color: #f0f8ff;}#sk-container-id-1 input.sk-toggleable__control:checked~div.sk-toggleable__content {max-height: 200px;max-width: 100%;overflow: auto;}#sk-container-id-1 input.sk-toggleable__control:checked~label.sk-toggleable__label-arrow:before {content: \"▾\";}#sk-container-id-1 div.sk-estimator input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-1 div.sk-label input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-1 input.sk-hidden--visually {border: 0;clip: rect(1px 1px 1px 1px);clip: rect(1px, 1px, 1px, 1px);height: 1px;margin: -1px;overflow: hidden;padding: 0;position: absolute;width: 1px;}#sk-container-id-1 div.sk-estimator {font-family: monospace;background-color: #f0f8ff;border: 1px dotted black;border-radius: 0.25em;box-sizing: border-box;margin-bottom: 0.5em;}#sk-container-id-1 div.sk-estimator:hover {background-color: #d4ebff;}#sk-container-id-1 div.sk-parallel-item::after {content: \"\";width: 100%;border-bottom: 1px solid gray;flex-grow: 1;}#sk-container-id-1 div.sk-label:hover label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-1 div.sk-serial::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: 0;}#sk-container-id-1 div.sk-serial {display: flex;flex-direction: column;align-items: center;background-color: white;padding-right: 0.2em;padding-left: 0.2em;position: relative;}#sk-container-id-1 div.sk-item {position: relative;z-index: 1;}#sk-container-id-1 div.sk-parallel {display: flex;align-items: stretch;justify-content: center;background-color: white;position: relative;}#sk-container-id-1 div.sk-item::before, #sk-container-id-1 div.sk-parallel-item::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: -1;}#sk-container-id-1 div.sk-parallel-item {display: flex;flex-direction: column;z-index: 1;position: relative;background-color: white;}#sk-container-id-1 div.sk-parallel-item:first-child::after {align-self: flex-end;width: 50%;}#sk-container-id-1 div.sk-parallel-item:last-child::after {align-self: flex-start;width: 50%;}#sk-container-id-1 div.sk-parallel-item:only-child::after {width: 0;}#sk-container-id-1 div.sk-dashed-wrapped {border: 1px dashed gray;margin: 0 0.4em 0.5em 0.4em;box-sizing: border-box;padding-bottom: 0.4em;background-color: white;}#sk-container-id-1 div.sk-label label {font-family: monospace;font-weight: bold;display: inline-block;line-height: 1.2em;}#sk-container-id-1 div.sk-label-container {text-align: center;}#sk-container-id-1 div.sk-container {/* jupyter's `normalize.less` sets `[hidden] { display: none; }` but bootstrap.min.css set `[hidden] { display: none !important; }` so we also need the `!important` here to be able to override the default hidden behavior on the sphinx rendered scikit-learn.org. See: https://github.com/scikit-learn/scikit-learn/issues/21755 */display: inline-block !important;position: relative;}#sk-container-id-1 div.sk-text-repr-fallback {display: none;}</style><div id=\"sk-container-id-1\" class=\"sk-top-container\"><div class=\"sk-text-repr-fallback\"><pre>LogisticRegression()</pre><b>In a Jupyter environment, please rerun this cell to show the HTML representation or trust the notebook. <br />On GitHub, the HTML representation is unable to render, please try loading this page with nbviewer.org.</b></div><div class=\"sk-container\" hidden><div class=\"sk-item\"><div class=\"sk-estimator sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-1\" type=\"checkbox\" checked><label for=\"sk-estimator-id-1\" class=\"sk-toggleable__label sk-toggleable__label-arrow\">LogisticRegression</label><div class=\"sk-toggleable__content\"><pre>LogisticRegression()</pre></div></div></div></div></div>"},"metadata":{}}],"execution_count":13},{"cell_type":"code","source":"","metadata":{"trusted":true},"outputs":[],"execution_count":null},{"cell_type":"code","source":"X_test_bow = cv.transform(X_test)\n\nX_bow_array = X_test_bow.toarray()\n\n# Make predictions on the test set\ny_pred = model.predict(X_bow_array)\n","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-03-10T04:44:02.160197Z","iopub.execute_input":"2025-03-10T04:44:02.160624Z","iopub.status.idle":"2025-03-10T04:44:05.530598Z","shell.execute_reply.started":"2025-03-10T04:44:02.160590Z","shell.execute_reply":"2025-03-10T04:44:05.529612Z"}},"outputs":[],"execution_count":18},{"cell_type":"code","source":"y_test = label_encoder.transform(y_test)\n\n# Accuracy of the model\naccuracy = accuracy_score(y_test, y_pred)\nprint(f\"Accuracy: {accuracy}\")\n\n# Confusion matrix for more detailed performance evaluation\ncm = confusion_matrix(y_test, y_pred)\nprint(\"Confusion Matrix:\")\nprint(cm)\n","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-03-10T04:44:53.020094Z","iopub.execute_input":"2025-03-10T04:44:53.020533Z","iopub.status.idle":"2025-03-10T04:44:53.033553Z","shell.execute_reply.started":"2025-03-10T04:44:53.020494Z","shell.execute_reply":"2025-03-10T04:44:53.032362Z"}},"outputs":[{"name":"stdout","text":"Accuracy: 0.8698\nConfusion Matrix:\n[[2173  332]\n [ 319 2176]]\n","output_type":"stream"}],"execution_count":20},{"cell_type":"markdown","source":"#### Use tfidf","metadata":{}},{"cell_type":"code","source":"model = LogisticRegression()\nmodel.fit(X_tfidf_array, y_train)\n","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-03-10T04:48:40.099030Z","iopub.execute_input":"2025-03-10T04:48:40.099315Z","iopub.status.idle":"2025-03-10T04:49:23.028026Z","shell.execute_reply.started":"2025-03-10T04:48:40.099292Z","shell.execute_reply":"2025-03-10T04:49:23.026988Z"}},"outputs":[{"execution_count":23,"output_type":"execute_result","data":{"text/plain":"LogisticRegression()","text/html":"<style>#sk-container-id-3 {color: black;background-color: white;}#sk-container-id-3 pre{padding: 0;}#sk-container-id-3 div.sk-toggleable {background-color: white;}#sk-container-id-3 label.sk-toggleable__label {cursor: pointer;display: block;width: 100%;margin-bottom: 0;padding: 0.3em;box-sizing: border-box;text-align: center;}#sk-container-id-3 label.sk-toggleable__label-arrow:before {content: \"▸\";float: left;margin-right: 0.25em;color: #696969;}#sk-container-id-3 label.sk-toggleable__label-arrow:hover:before {color: black;}#sk-container-id-3 div.sk-estimator:hover label.sk-toggleable__label-arrow:before {color: black;}#sk-container-id-3 div.sk-toggleable__content {max-height: 0;max-width: 0;overflow: hidden;text-align: left;background-color: #f0f8ff;}#sk-container-id-3 div.sk-toggleable__content pre {margin: 0.2em;color: black;border-radius: 0.25em;background-color: #f0f8ff;}#sk-container-id-3 input.sk-toggleable__control:checked~div.sk-toggleable__content {max-height: 200px;max-width: 100%;overflow: auto;}#sk-container-id-3 input.sk-toggleable__control:checked~label.sk-toggleable__label-arrow:before {content: \"▾\";}#sk-container-id-3 div.sk-estimator input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-3 div.sk-label input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-3 input.sk-hidden--visually {border: 0;clip: rect(1px 1px 1px 1px);clip: rect(1px, 1px, 1px, 1px);height: 1px;margin: -1px;overflow: hidden;padding: 0;position: absolute;width: 1px;}#sk-container-id-3 div.sk-estimator {font-family: monospace;background-color: #f0f8ff;border: 1px dotted black;border-radius: 0.25em;box-sizing: border-box;margin-bottom: 0.5em;}#sk-container-id-3 div.sk-estimator:hover {background-color: #d4ebff;}#sk-container-id-3 div.sk-parallel-item::after {content: \"\";width: 100%;border-bottom: 1px solid gray;flex-grow: 1;}#sk-container-id-3 div.sk-label:hover label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-3 div.sk-serial::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: 0;}#sk-container-id-3 div.sk-serial {display: flex;flex-direction: column;align-items: center;background-color: white;padding-right: 0.2em;padding-left: 0.2em;position: relative;}#sk-container-id-3 div.sk-item {position: relative;z-index: 1;}#sk-container-id-3 div.sk-parallel {display: flex;align-items: stretch;justify-content: center;background-color: white;position: relative;}#sk-container-id-3 div.sk-item::before, #sk-container-id-3 div.sk-parallel-item::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: -1;}#sk-container-id-3 div.sk-parallel-item {display: flex;flex-direction: column;z-index: 1;position: relative;background-color: white;}#sk-container-id-3 div.sk-parallel-item:first-child::after {align-self: flex-end;width: 50%;}#sk-container-id-3 div.sk-parallel-item:last-child::after {align-self: flex-start;width: 50%;}#sk-container-id-3 div.sk-parallel-item:only-child::after {width: 0;}#sk-container-id-3 div.sk-dashed-wrapped {border: 1px dashed gray;margin: 0 0.4em 0.5em 0.4em;box-sizing: border-box;padding-bottom: 0.4em;background-color: white;}#sk-container-id-3 div.sk-label label {font-family: monospace;font-weight: bold;display: inline-block;line-height: 1.2em;}#sk-container-id-3 div.sk-label-container {text-align: center;}#sk-container-id-3 div.sk-container {/* jupyter's `normalize.less` sets `[hidden] { display: none; }` but bootstrap.min.css set `[hidden] { display: none !important; }` so we also need the `!important` here to be able to override the default hidden behavior on the sphinx rendered scikit-learn.org. See: https://github.com/scikit-learn/scikit-learn/issues/21755 */display: inline-block !important;position: relative;}#sk-container-id-3 div.sk-text-repr-fallback {display: none;}</style><div id=\"sk-container-id-3\" class=\"sk-top-container\"><div class=\"sk-text-repr-fallback\"><pre>LogisticRegression()</pre><b>In a Jupyter environment, please rerun this cell to show the HTML representation or trust the notebook. <br />On GitHub, the HTML representation is unable to render, please try loading this page with nbviewer.org.</b></div><div class=\"sk-container\" hidden><div class=\"sk-item\"><div class=\"sk-estimator sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-3\" type=\"checkbox\" checked><label for=\"sk-estimator-id-3\" class=\"sk-toggleable__label sk-toggleable__label-arrow\">LogisticRegression</label><div class=\"sk-toggleable__content\"><pre>LogisticRegression()</pre></div></div></div></div></div>"},"metadata":{}}],"execution_count":23},{"cell_type":"code","source":"X_test_bow = tfidf.transform(X_test)\n\nX_bow_array = X_test_bow.toarray()\n\n# Make predictions on the test set\ny_pred = model.predict(X_bow_array)\n","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-03-10T04:52:33.259750Z","iopub.execute_input":"2025-03-10T04:52:33.260246Z","iopub.status.idle":"2025-03-10T04:52:36.830345Z","shell.execute_reply.started":"2025-03-10T04:52:33.260207Z","shell.execute_reply":"2025-03-10T04:52:36.828860Z"}},"outputs":[],"execution_count":24},{"cell_type":"code","source":"# y_test = label_encoder.transform(y_test)\n\n# Accuracy of the model\naccuracy = accuracy_score(y_test, y_pred)\nprint(f\"Accuracy: {accuracy}\")\n\n# Confusion matrix for more detailed performance evaluation\ncm = confusion_matrix(y_test, y_pred)\nprint(\"Confusion Matrix:\")\nprint(cm)\n","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-03-10T04:53:05.859885Z","iopub.execute_input":"2025-03-10T04:53:05.860278Z","iopub.status.idle":"2025-03-10T04:53:05.871803Z","shell.execute_reply.started":"2025-03-10T04:53:05.860248Z","shell.execute_reply":"2025-03-10T04:53:05.870438Z"}},"outputs":[{"name":"stdout","text":"Accuracy: 0.8834\nConfusion Matrix:\n[[2173  332]\n [ 251 2244]]\n","output_type":"stream"}],"execution_count":25},{"cell_type":"markdown","source":"## Word2Vec","metadata":{}},{"cell_type":"code","source":"import pandas as pd\nimport gensim\nfrom gensim.models import Word2Vec\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.metrics import accuracy_score\nimport nltk\nfrom nltk.tokenize import word_tokenize\nimport numpy as np","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-03-10T05:00:13.769095Z","iopub.execute_input":"2025-03-10T05:00:13.769448Z","iopub.status.idle":"2025-03-10T05:00:14.471717Z","shell.execute_reply.started":"2025-03-10T05:00:13.769421Z","shell.execute_reply":"2025-03-10T05:00:14.470597Z"}},"outputs":[],"execution_count":28},{"cell_type":"code","source":"# Rename columns for clarity\ndf.columns = ['review', 'sentiment']\n\n# Convert sentiment labels into binary values (assuming 'positive' and 'negative' labels)\ndf['sentiment'] = df['sentiment'].map({'positive': 1, 'negative': 0})  # Adjust if necessary\n\n# Tokenize reviews\ndf['tokenized'] = df['review'].apply(lambda x: word_tokenize(str(x).lower()))\n\n# Train Word2Vec on tokenized text (Using Skip-gram model)\nword2vec_model = Word2Vec(sentences=df['tokenized'], vector_size=100, window=5, min_count=2, sg=1)\n\n# Function to get the average word vectors for each review\ndef get_average_vector(tokens, model, vector_size=100):\n    valid_tokens = [token for token in tokens if token in model.wv]\n    if not valid_tokens:  # If no known words, return zero vector\n        return np.zeros(vector_size)\n    vectors = [model.wv[token] for token in valid_tokens]\n    return np.mean(vectors, axis=0)\n\n# Convert all reviews into vectors\nX = np.array([get_average_vector(tokens, word2vec_model) for tokens in df['tokenized']])\n\n# Extract target labels\ny = df['sentiment'].values\n","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-03-10T05:00:14.472908Z","iopub.execute_input":"2025-03-10T05:00:14.473185Z","iopub.status.idle":"2025-03-10T05:01:42.761681Z","shell.execute_reply.started":"2025-03-10T05:00:14.473162Z","shell.execute_reply":"2025-03-10T05:01:42.760582Z"}},"outputs":[],"execution_count":29},{"cell_type":"code","source":"df['sentiment'] = df['sentiment'].map({'positive': 1, 'negative': 0})  # Adjust if necessary\n","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-03-10T05:09:27.836143Z","iopub.execute_input":"2025-03-10T05:09:27.836614Z","iopub.status.idle":"2025-03-10T05:09:27.845790Z","shell.execute_reply.started":"2025-03-10T05:09:27.836579Z","shell.execute_reply":"2025-03-10T05:09:27.844609Z"}},"outputs":[],"execution_count":37},{"cell_type":"code","source":"y = df['sentiment'].values\n","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-03-10T05:09:38.987223Z","iopub.execute_input":"2025-03-10T05:09:38.987692Z","iopub.status.idle":"2025-03-10T05:09:38.992673Z","shell.execute_reply.started":"2025-03-10T05:09:38.987650Z","shell.execute_reply":"2025-03-10T05:09:38.991441Z"}},"outputs":[],"execution_count":38},{"cell_type":"code","source":"\n# Split data into training and testing sets (80% train, 20% test)\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)\n\n# Train Logistic Regression model\nlr_model = LogisticRegression()\nlr_model.fit(X_train, y_train)\n\n","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-03-10T05:09:41.607464Z","iopub.execute_input":"2025-03-10T05:09:41.608028Z","iopub.status.idle":"2025-03-10T05:09:41.895903Z","shell.execute_reply.started":"2025-03-10T05:09:41.607988Z","shell.execute_reply":"2025-03-10T05:09:41.894769Z"}},"outputs":[{"execution_count":39,"output_type":"execute_result","data":{"text/plain":"LogisticRegression()","text/html":"<style>#sk-container-id-4 {color: black;background-color: white;}#sk-container-id-4 pre{padding: 0;}#sk-container-id-4 div.sk-toggleable {background-color: white;}#sk-container-id-4 label.sk-toggleable__label {cursor: pointer;display: block;width: 100%;margin-bottom: 0;padding: 0.3em;box-sizing: border-box;text-align: center;}#sk-container-id-4 label.sk-toggleable__label-arrow:before {content: \"▸\";float: left;margin-right: 0.25em;color: #696969;}#sk-container-id-4 label.sk-toggleable__label-arrow:hover:before {color: black;}#sk-container-id-4 div.sk-estimator:hover label.sk-toggleable__label-arrow:before {color: black;}#sk-container-id-4 div.sk-toggleable__content {max-height: 0;max-width: 0;overflow: hidden;text-align: left;background-color: #f0f8ff;}#sk-container-id-4 div.sk-toggleable__content pre {margin: 0.2em;color: black;border-radius: 0.25em;background-color: #f0f8ff;}#sk-container-id-4 input.sk-toggleable__control:checked~div.sk-toggleable__content {max-height: 200px;max-width: 100%;overflow: auto;}#sk-container-id-4 input.sk-toggleable__control:checked~label.sk-toggleable__label-arrow:before {content: \"▾\";}#sk-container-id-4 div.sk-estimator input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-4 div.sk-label input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-4 input.sk-hidden--visually {border: 0;clip: rect(1px 1px 1px 1px);clip: rect(1px, 1px, 1px, 1px);height: 1px;margin: -1px;overflow: hidden;padding: 0;position: absolute;width: 1px;}#sk-container-id-4 div.sk-estimator {font-family: monospace;background-color: #f0f8ff;border: 1px dotted black;border-radius: 0.25em;box-sizing: border-box;margin-bottom: 0.5em;}#sk-container-id-4 div.sk-estimator:hover {background-color: #d4ebff;}#sk-container-id-4 div.sk-parallel-item::after {content: \"\";width: 100%;border-bottom: 1px solid gray;flex-grow: 1;}#sk-container-id-4 div.sk-label:hover label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-4 div.sk-serial::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: 0;}#sk-container-id-4 div.sk-serial {display: flex;flex-direction: column;align-items: center;background-color: white;padding-right: 0.2em;padding-left: 0.2em;position: relative;}#sk-container-id-4 div.sk-item {position: relative;z-index: 1;}#sk-container-id-4 div.sk-parallel {display: flex;align-items: stretch;justify-content: center;background-color: white;position: relative;}#sk-container-id-4 div.sk-item::before, #sk-container-id-4 div.sk-parallel-item::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: -1;}#sk-container-id-4 div.sk-parallel-item {display: flex;flex-direction: column;z-index: 1;position: relative;background-color: white;}#sk-container-id-4 div.sk-parallel-item:first-child::after {align-self: flex-end;width: 50%;}#sk-container-id-4 div.sk-parallel-item:last-child::after {align-self: flex-start;width: 50%;}#sk-container-id-4 div.sk-parallel-item:only-child::after {width: 0;}#sk-container-id-4 div.sk-dashed-wrapped {border: 1px dashed gray;margin: 0 0.4em 0.5em 0.4em;box-sizing: border-box;padding-bottom: 0.4em;background-color: white;}#sk-container-id-4 div.sk-label label {font-family: monospace;font-weight: bold;display: inline-block;line-height: 1.2em;}#sk-container-id-4 div.sk-label-container {text-align: center;}#sk-container-id-4 div.sk-container {/* jupyter's `normalize.less` sets `[hidden] { display: none; }` but bootstrap.min.css set `[hidden] { display: none !important; }` so we also need the `!important` here to be able to override the default hidden behavior on the sphinx rendered scikit-learn.org. See: https://github.com/scikit-learn/scikit-learn/issues/21755 */display: inline-block !important;position: relative;}#sk-container-id-4 div.sk-text-repr-fallback {display: none;}</style><div id=\"sk-container-id-4\" class=\"sk-top-container\"><div class=\"sk-text-repr-fallback\"><pre>LogisticRegression()</pre><b>In a Jupyter environment, please rerun this cell to show the HTML representation or trust the notebook. <br />On GitHub, the HTML representation is unable to render, please try loading this page with nbviewer.org.</b></div><div class=\"sk-container\" hidden><div class=\"sk-item\"><div class=\"sk-estimator sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-4\" type=\"checkbox\" checked><label for=\"sk-estimator-id-4\" class=\"sk-toggleable__label sk-toggleable__label-arrow\">LogisticRegression</label><div class=\"sk-toggleable__content\"><pre>LogisticRegression()</pre></div></div></div></div></div>"},"metadata":{}}],"execution_count":39},{"cell_type":"code","source":"# Make predictions\ny_pred = lr_model.predict(X_test)\n\n# Evaluate model accuracy\naccuracy = accuracy_score(y_test, y_pred)\nprint(f\"Logistic Regression Accuracy: {accuracy:.4f}\")","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-03-10T05:09:45.615664Z","iopub.execute_input":"2025-03-10T05:09:45.616031Z","iopub.status.idle":"2025-03-10T05:09:45.626763Z","shell.execute_reply.started":"2025-03-10T05:09:45.616005Z","shell.execute_reply":"2025-03-10T05:09:45.625751Z"}},"outputs":[{"name":"stdout","text":"Logistic Regression Accuracy: 0.8656\n","output_type":"stream"}],"execution_count":40},{"cell_type":"code","source":"","metadata":{"trusted":true},"outputs":[],"execution_count":null}]}